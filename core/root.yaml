apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: root
  namespace: argocd
spec:
  goTemplate: true
  goTemplateOptions: [ "missingkey=error" ]
  generators:
    - git:
        repoURL: $SSH_REPO_URL
        revision: $REPO_BRANCH
        files:
          - path: "apps/**/*.yaml"
        values:
          name: '{{ trimSuffix ".yaml" .path.filename }}'
          env: '{{ .path.basename }}'
          repo: $SSH_REPO_URL
          branch: $REPO_BRANCH
          dir: $PROJECT_DIR
          domain: '{{ ternary "$STAGE_DOMAIN" "$PROD_DOMAIN" (eq .path.basename "stage") }}'
  templatePatch: |
    {{- if (dig "autoUpdate" false .) }}
    metadata:
      annotations:
        argocd-image-updater.argoproj.io/image-list: image={{ .image.name }}
        {{- if eq .values.env "stage" }}
        argocd-image-updater.argoproj.io/image.update-strategy: newest-build
        argocd-image-updater.argoproj.io/image.allow-tags: regexp:^[0-9a-f]{7}$
        {{- end }}
        {{- if eq .values.env "prod" }}
        argocd-image-updater.argoproj.io/image.update-strategy: semver
        {{- end }}
        argocd-image-updater.argoproj.io/write-back-method: git:repocreds
        argocd-image-updater.argoproj.io/git-branch: {{ .values.branch }}
    {{- end }}
  template:
    metadata:
      name: '{{ .values.name }}-{{ .values.env }}'
      namespace: argocd
      finalizers:
        - resources-finalizer.argocd.argoproj.io
    spec:
      destination:
        namespace: '{{ .values.env }}'
        server: https://kubernetes.default.svc
      source:
        path: "charts/app"
        repoURL: '{{ .values.repo }}'
        targetRevision: '{{ .values.branch }}'
        helm:
          values: |
            ingress: {{ dig "ingress" true . }}
            {{- if not (dig "autoUpdate" false .) }}
            image:
            {{ toYaml .image | indent 2 }}
            {{- end }}
            host:
            {{- if hasKey . "subdomain" }}
              {{ .subdomain }}.{{ .values.domain }}
            {{- else }}
              {{ .values.domain }}
            {{- end }}
            port: {{ .port }}
            {{- if hasKey . "env" }}
            env:
            {{ toYaml .env | indent 2 }}
            {{- end }}
            {{- if hasKey . "secrets" }}
            secrets:
            {{ toYaml .secrets | indent 2 }}
            {{- end }}
            {{- if hasKey . "volume" }}
            volume:
              path: {{ .values.dir }}/volumes/{{ .values.env }}/{{ .values.name }}
            {{ toYaml .volume | indent 2 }}
            {{- end }}
            {{- if hasKey . "command" }}
            command: {{ .command }}
            {{- end }}
      project: default
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
        syncOptions:
          - CreateNamespace=true
